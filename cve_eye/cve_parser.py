import os
import json
import time
from pathlib import Path
from datetime import datetime
import constants as constants
from constants import (CVE_CONTAINERS_KEY, CVE_METRICS_KEY,
                       CNA_KEY, CVSS_KEY, CVE_SCORE_KEY, 
                       CVE_METADATA_KEY, CVE_ID_KEY,
                       CVE_DESCRIPTIONS_KEY, CVE_VALUE_KEY,
                       CVE_REDACTED)

def get_last_run_time():
  path =  Path(constants.RECORD_FILE)
  if path.exists():
    with open(constants.RECORD_FILE, 'r') as f:
      record = json.load(f)
    return float(record[constants.LAST_RUN_TIME])
  else:
    current_time = time.time()
    last_run_time = {
      constants.LAST_RUN_TIME: str(current_time)
    }
    with open(constants.RECORD_FILE, 'w') as f: 
      json.dump(last_run_time, f)
    return None

def get_score_limit():
  with open(constants.CONFIG_FILE, 'r') as f:
    config = json.load(f)
    return config[constants.FILTER_KEY][constants.SCORE_KEY]

class NewCVE:
  def __init__(self):
    self.cve_list = []
    self.filtered_cve_dict = {}
    self.last_run_time = get_last_run_time()
    self.formatted_output = ''

  def get_new_cve(self):
    this_year = datetime.now().year
    cve_dir = constants.DEST_DIR + constants.CVE_PATH + str(this_year) 
    self.walk_dir(cve_dir)

  def walk_dir(self, path):
    for file in os.listdir(path):
      current_path = path + '/' + file
      if os.path.isdir(current_path):
        self.walk_dir(current_path)
      elif file.endswith('.json'):
        time_mod = os.path.getmtime(current_path)
        if time_mod > self.last_run_time:
          self.cve_list.append(current_path)

  def filter_cve_by_config(self):
    score_limit = get_score_limit()
    for cve_path in self.cve_list:
      with open(cve_path, 'r') as f:
        data = json.load(f)
        try:
          metrics = data[CVE_CONTAINERS_KEY][CNA_KEY][CVE_METRICS_KEY]
          for metric in metrics:
            if (CVSS_KEY in metric) and (CVE_SCORE_KEY in metric[CVSS_KEY]):
              score = metric[CVSS_KEY][CVE_SCORE_KEY]
              if score >= score_limit:
                self.filtered_cve_dict[cve_path] = score
        except KeyError:
          pass

  def get_formatted_output(self):
    for cve_path, score in self.filtered_cve_dict.items():
      with open(cve_path, 'r') as f:
        data = json.load(f)
        try:
          gathered_descriptions = ""
          cve_id = data[CVE_METADATA_KEY][CVE_ID_KEY] 
          descriptions = data[CVE_CONTAINERS_KEY][CNA_KEY][CVE_DESCRIPTIONS_KEY]
          for description in descriptions:
            if CVE_VALUE_KEY in description:
              if CVE_REDACTED not in description[CVE_VALUE_KEY]:
                gathered_descriptions += description[CVE_VALUE_KEY].strip() + '\n'

          if gathered_descriptions:
            self.formatted_output += constants.SEPARATOR
            self.formatted_output += f'{cve_id}\n'
            self.formatted_output += f'Score: {score}\n'
            self.formatted_output += gathered_descriptions
            self.formatted_output += constants.SEPARATOR
        except KeyError:
          pass

if __name__ == "__main__":
  new_cve = NewCVE()
  new_cve.get_new_cve()
  new_cve.filter_cve_by_config()
  new_cve.get_formatted_output()
  print(new_cve.formatted_output)
